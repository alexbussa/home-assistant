# PMS Statistics
# Seems to be a perfomance hit
# - platform: plex
#   host: !secret pms_host
#   port: !secret pms_port
#   name: !secret pms_name
#   username: !secret plex_username
#   password: !secret plex_password
#   server: !secret pms_server

# Home Assistant Version
- platform: version
  source: local
- platform: version
  source: docker

# Home Assistant Uptime
- platform: uptime

# Tautulli

# Time & Date
- platform: time_date
  display_options:
    - time
    - date

# Dark Sky Weather
- platform: darksky
  api_key: !secret darksky_api_key
  latitude: !secret home_latitude
  longitude: !secret home_longitude
  forecast:
    - 0
  monitored_conditions:
    - summary
    - icon
    - precip_probability
    - temperature
    - humidity
    - minutely_summary
    - hourly_summary
    - daily_summary
    - temperature_high
    - temperature_low
    - sunrise_time
    - sunset_time
    - nearest_storm_distance
  scan_interval:
    minutes: 5


- platform: integration
  source: sensor.energy_usage
  name: Energy Usage kWh
  unit_prefix: k
  round: 2

- platform: template
  sensors:
    bedroom_presence:
      friendly_name: 'Bedroom Presence'
      value_template: >
        {% if is_state('device_tracker.beacon_bedroom', 'bedroom') %}
          occupied
        {% else %}
          unoccupied
        {% endif %}
    august_front_door:
      friendly_name: 'Front Door'
      value_template: >
        {{ states.lock.august_smart_lock_pro_front_door.state }}
      icon_template: >
        {% if is_state('lock.august_smart_lock_pro_front_door', 'locked') %}
          mdi:lock
        {% elif is_state('lock.august_smart_lock_pro_front_door', 'unlocked') %}
          mdi:lock-open
        {% else %}
          mdi:timer-sand
        {% endif %}
    august_garage_door:
      friendly_name: 'Garage Door'
      value_template: >
        {{ states.lock.august_smart_lock_pro_garage_door.state }}
      icon_template: >
        {% if is_state('lock.august_smart_lock_pro_garage_door', 'locked') %}
          mdi:lock
        {% elif is_state('lock.august_smart_lock_pro_garage_door', 'unlocked') %}
          mdi:lock-open
        {% else %}
          mdi:timer-sand
        {% endif %}
    garage_actual:
      friendly_name: 'Garage Actual'
      value_template: >
        {% if is_state('binary_sensor.garage_actual', 'off') %}
          closed
        {% elif is_state('binary_sensor.garage_actual', 'on') %}
          open
        {% else %}
          unknown
        {% endif %}
      icon_template: >
        {% if is_state('binary_sensor.garage_actual', 'off') %}
          mdi:garage
        {% elif is_state('binary_sensor.garage_actual', 'on') %}
          mdi:garage-open
        {% else %}
          mdi:timer-sand
        {% endif %}


# Custom sensors for mode monitoring
- platform: template
  sensors:
    mode_morning:
      friendly_name: 'Morning Mode'
      value_template: >
        {{ states('input_boolean.mode_morning') }}
      icon_template: 'mdi:weather-hazy'
    mode_day:
      friendly_name: 'Day Mode'
      value_template: >
        {{ states('input_boolean.mode_day') }}
      icon_template: 'mdi:weather-sunny'
    mode_sunset:
      friendly_name: 'Sunset Mode'
      value_template: >
        {{ states('input_boolean.mode_sunset') }}
      icon_template: 'mdi:weather-sunset'
    mode_night:
      friendly_name: 'Night Mode'
      value_template: >
        {{ states('input_boolean.mode_night') }}
      icon_template: 'mdi:weather-night'
    mode_guest:
      friendly_name: 'Guest Mode'
      value_template: >
        {{ states('input_boolean.mode_guest') }}
      icon_template: 'mdi:human-greeting'
    mode_home_theater:
      friendly_name: 'Home Theater Mode'
      value_template: >
        {{ states('input_boolean.mode_home_theater') }}
      icon_template: 'mdi:theater'
    mode_sleep:
      friendly_name: 'Sleep Mode'
      value_template: >
        {{ states('input_boolean.mode_sleep') }}
      icon_template: 'mdi:sleep'
    mode_simulate_presence:
      friendly_name: 'Simulate Presence Mode'
      value_template: >
        {% if is_state('input_boolean.mode_simulate_presence', 'on') %}
          {% if is_state("group.inside_lights", "on") %}
            Lights On
          {% else %}
            Lights Off
          {% endif %}
        {% else %}
          off
        {% endif %}


# Battery sensors
- platform: template
  sensors:
    battery_august_front_door:
      friendly_name: 'August - Front Door'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.august_smart_lock_pro_front_door_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_august_front_door:
      friendly_name: 'August - Front Door'
      value_template: '{{ states("sensor.august_smart_lock_pro_front_door_battery_level") | int(0) <= 50 }}'

    battery_august_front_door_keypad:
      friendly_name: 'August - Front Door Keypad'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.august_web_front_door_keypad_battery") | int(0) }}'
      device_class: battery
    dashboard_battery_august_front_door_keypad:
      friendly_name: 'August - Front Door Keypad'
      value_template: '{{ states("sensor.august_web_front_door_keypad_battery") | int(0) <= 50 }}'

    battery_august_garage_door:
      friendly_name: 'August - Garage Door'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.august_smart_lock_pro_garage_door_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_august_garage_door:
      friendly_name: 'August - Garage Door'
      value_template: '{{ states("sensor.august_smart_lock_pro_garage_door_battery_level") | int(0) <= 50 }}'

    battery_bedroom_closet_door_sensor:
      friendly_name: 'Bedroom Closet Door Sensor'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.bedroom_closet_door_sensor_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_bedroom_closet_door_sensor:
      friendly_name: 'Bedroom Closet Door Sensor'
      value_template: '{{ states("sensor.bedroom_closet_door_sensor_battery_level") | int(0) <= 50 }}'

    battery_den_multisensor:
      friendly_name: 'Den MultiSensor'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.den_multisensor_sensor_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_den_multisensor:
      friendly_name: 'Den MultiSensor'
      value_template: '{{ states("sensor.den_multisensor_sensor_battery_level") | int(0) <= 50 }}'

    battery_bedroom_closet_trisensor:
      friendly_name: 'Bedroom Closet TriSensor'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.bedroom_closet_door_sensor_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_bedroom_closet_trisensor:
      friendly_name: 'Bedroom Closet TriSensor'
      value_template: '{{ states("sensor.bedroom_closet_door_sensor_battery_level") | int(0) <= 50 }}'

    battery_downstairs_hallway_trisensor:
      friendly_name: 'Downstairs Hallway TriSensor'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.downstairs_hallway_trisensor_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_downstairs_hallway_trisensor:
      friendly_name: 'Downstairs Hallway TriSensor'
      value_template: '{{ states("sensor.downstairs_hallway_trisensor_battery_level") | int(0) <= 50 }}'

    battery_garage_motion_sensor:
      friendly_name: 'Garage Motion Sensor'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.garage_motion_sensor_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_garage_motion_sensor:
      friendly_name: 'Garage Motion Sensor'
      value_template: '{{ states("sensor.garage_motion_sensor_battery_level") | int(0) <= 50 }}'

    battery_garage_stairs_multisensor:
      friendly_name: 'Garage Stairs MultiSensor'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.garage_stairs_multisensor_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_garage_stairs_multisensor:
      friendly_name: 'Garage Stairs MultiSensor'
      value_template: '{{ states("sensor.garage_stairs_multisensor_battery_level") | int(0) <= 50 }}'

    battery_guest_bedroom_closet_door_sensor:
      friendly_name: 'Guest Bedroom Closet Door Sensor'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.guest_bedroom_closet_door_sensor_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_guest_bedroom_closet_door_sensor:
      friendly_name: 'Guest Bedroom Closet Door Sensor'
      value_template: '{{ states("sensor.guest_bedroom_closet_door_sensor_battery_level") | int(0) <= 50 }}'

    battery_laundry_door_left_sensor:
      friendly_name: 'Laundry Door Left Sensor'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.laundry_door_left_sensor_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_laundry_door_left_sensor:
      friendly_name: 'Laundry Door Left Sensor'
      value_template: '{{ states("sensor.laundry_door_left_sensor_battery_level") | int(0) <= 50 }}'

    battery_laundry_door_right_sensor:
      friendly_name: 'Laundry Door Right Sensor'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.laundry_door_right_sensor_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_laundry_door_right_sensor:
      friendly_name: 'Laundry Door Right Sensor'
      value_template: '{{ states("sensor.laundry_door_right_sensor_battery_level") | int(0) <= 50 }}'

    battery_main_stairs_multisensor:
      friendly_name: 'Main Stairs MultiSensor'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.main_stairs_multisensor_battery_level") | int(0) }}'
      device_class: battery
    dashboard_battery_main_stairs_multisensor:
      friendly_name: 'Main Stairs MultiSensor'
      value_template: '{{ states("sensor.main_stairs_multisensor_battery_level") | int(0) <= 50 }}'

    battery_server_rack_ups:
      friendly_name: 'Server Rack UPS'
      unit_of_measurement: '%'
      value_template: '{{ states("sensor.server_rack_ups_battery_charge") | int(0) }}'
      device_class: battery
    dashboard_battery_server_rack_ups:
      friendly_name: 'Server Rack UPS'
      value_template: '{{ states("sensor.server_rack_ups_battery_charge") | int(0) <= 50 }}'


# Networked Devices
- platform: template
  sensors:
    network_overwatch:
      friendly_name: Overwatch
      value_template: >
        {{ ('online' if is_state('device_tracker.overwatch', 'home') else 'offline') | title }}
      icon_template: 'mdi:server'
    network_pfsense:
      friendly_name: pfSense
      value_template: >
        {{ ('online' if is_state('device_tracker.pfsense', 'home') else 'offline') | title }}
      icon_template: 'mdi:server'
    network_unifi_ap_downstairs:
      friendly_name: UniFi AP Downstairs
      value_template: >
        {{ ('online' if is_state('device_tracker.unifi_ap_downstairs', 'home') else 'offline') | title }}
      icon_template: 'mdi:access-point-network'
    network_unifi_ap_upstairs:
      friendly_name: UniFi AP Upstairs
      value_template: >
        {{ ('online' if is_state('device_tracker.unifi_ap_upstairs', 'home') else 'offline') | title }}
      icon_template: 'mdi:access-point-network'
    network_unifi_cloudkey:
      friendly_name: UniFi Cloud Key Plus
      value_template: >
        {{ ('online' if is_state('device_tracker.unifi_cloudkey', 'home') else 'offline') | title }}
      icon_template: 'mdi:folder-key-network'
    network_unifi_switch_16:
      friendly_name: UniFi Switch 16
      value_template: >
        {{ ('online' if is_state('device_tracker.unifi_switch_16', 'home') else 'offline') | title }}
      icon_template: 'mdi:switch'
    network_unifi_switch_8_downstairs:
      friendly_name: UniFi Switch 8 - Downstairs
      value_template: >
        {{ ('online' if is_state('device_tracker.unifi_switch_8_downstairs', 'home') else 'offline') | title }}
      icon_template: 'mdi:switch'
    network_unifi_switch_8_upstairs:
      friendly_name: UniFi Switch 8 - Upstairs
      value_template: >
        {{ ('online' if is_state('device_tracker.unifi_switch_8_upstairs', 'home') else 'offline') | title }}
      icon_template: 'mdi:switch'
    network_unifi_switch_8_den:
      friendly_name: UniFi Switch 8 - Den
      value_template: >
        {{ ('online' if is_state('device_tracker.unifi_switch_8_den', 'home') else 'offline') | title }}
      icon_template: 'mdi:switch'
    network_woodhouse:
      friendly_name: Woodhouse
      value_template: >
        {{ ('online' if is_state('group.device_tracker_woodhouse', 'home') else 'offline') | title }}
      icon_template: 'mdi:server'
    network_uvc_front_door:
      friendly_name: UVC Front Door
      value_template: >
        {{ ('online' if is_state('device_tracker.uvc_front_door', 'home') else 'offline') | title }}
      icon_template: 'mdi:cctv'
    network_uvc_garage:
      friendly_name: UVC Garage
      value_template: >
        {{ ('online' if is_state('device_tracker.uvc_garage', 'home') else 'offline') | title }}
      icon_template: 'mdi:cctv'
    network_uvc_main_floor:
      friendly_name: UVC Main Floor
      value_template: >
        {{ ('online' if is_state('device_tracker.uvc_main_floor', 'home') else 'offline') | title }}
      icon_template: 'mdi:cctv'
    network_uvc_main_patio:
      friendly_name: UVC Main Patio
      value_template: >
        {{ ('online' if is_state('device_tracker.uvc_main_patio', 'home') else 'offline') | title }}
      icon_template: 'mdi:cctv'



# Custom sensors for dashboard views
- platform: template
  sensors:
    dashboard_inside_average_temperature:
      friendly_name: 'Average Temperature'
      value_template: '{{ states.sensor.average_temperature.state | round() }}'
      unit_of_measurement: 'ºF'
    dashboard_inside_average_humidity:
      friendly_name: 'Average Humidity'
      value_template: '{{ states.sensor.average_humidity.state | round() }}'
      unit_of_measurement: '%'
    dashboard_outside_temperature:
      friendly_name: 'Temperature'
      value_template: '{{ states.sensor.dark_sky_temperature.state | round() }}'
      unit_of_measurement: 'ºF'
    dashboard_outside_high_temperature:
      friendly_name: 'High'
      value_template: '{{ states.sensor.dark_sky_daytime_high_temperature_0d.state | round() }}'
      unit_of_measurement: 'ºF'
    dashboard_outside_low_temperature:
      friendly_name: 'Low'
      value_template: '{{ states.sensor.dark_sky_overnight_low_temperature_0d.state | round() }}'
      unit_of_measurement: 'ºF'
    dashboard_outside_humidity:
      friendly_name: 'Humidity'
      value_template: '{{ states.sensor.dark_sky_humidity_0d.state | round() }}'
      unit_of_measurement: '%'
    dashboard_current_home_mode:
      friendly_name: 'Current Home Mode'
      value_template: >-
        {% if is_state('input_boolean.mode_morning', 'on') %}
          Morning
        {% elif is_state('input_boolean.mode_day', 'on') %}
          Day
        {% elif is_state('input_boolean.mode_sunset', 'on') %}
          Sunset
        {% elif is_state('input_boolean.mode_night', 'on') %}
          Night
        {% else %}
          Unknown
        {% endif %}
      icon_template: >-
        {% if is_state('input_boolean.mode_morning', 'on') %}
          mdi:weather-hazy
        {% elif is_state('input_boolean.mode_day', 'on') %}
          mdi:weather-sunny
        {% elif is_state('input_boolean.mode_sunset', 'on') %}
          mdi:weather-sunset
        {% elif is_state('input_boolean.mode_night', 'on') %}
          mdi:weather-night
        {% else %}
          mdi:weather-cloudy-alert
        {% endif %}
    dashboard_current_mode:
      friendly_name: 'Current Mode'
      value_template: >-
        {% if is_state('input_boolean.mode_sleep', 'on') %}
          Sleep
        {% elif is_state('input_boolean.mode_home_theater', 'on') %}
          Theater
        {% elif is_state('input_boolean.mode_guest', 'on') %}
          Guest
        {% elif is_state('input_boolean.mode_morning', 'on') %}
          Morning
        {% elif is_state('input_boolean.mode_day', 'on') %}
          Day
        {% elif is_state('input_boolean.mode_sunset', 'on') %}
          Sunset
        {% elif is_state('input_boolean.mode_night', 'on') %}
          Night
        {% else %}
          Unknown
        {% endif %}
      icon_template: >-
        {% if is_state('input_boolean.mode_sleep', 'on') %}
          mdi:sleep
        {% elif is_state('input_boolean.mode_home_theater', 'on') %}
          mdi:theater
        {% elif is_state('input_boolean.mode_guest', 'on') %}
          mdi:human-greeting
        {% elif is_state('input_boolean.mode_morning', 'on') %}
          mdi:weather-hazy
        {% elif is_state('input_boolean.mode_day', 'on') %}
          mdi:weather-sunny
        {% elif is_state('input_boolean.mode_sunset', 'on') %}
          mdi:weather-sunset
        {% elif is_state('input_boolean.mode_night', 'on') %}
          mdi:weather-night
        {% else %}
          mdi:weather-cloudy-alert
        {% endif %}
    dashboard_home_state:
      friendly_name: Home State
      value_template: >-
        {% if states.binary_sensor.garage_actual.state == 'off' and states.lock.august_smart_lock_pro_front_door.state == 'locked' and states.lock.august_smart_lock_pro_garage_door.state == 'locked' and states.group.all_doors.state == 'off' %}
          Secure
        {% else %}
          Insecure
        {% endif %}
      icon_template: >-
        {% if states.binary_sensor.garage_actual.state == 'off' and states.lock.august_smart_lock_pro_front_door.state == 'locked' and states.lock.august_smart_lock_pro_garage_door.state == 'locked' and states.group.all_doors.state == 'off' %}
          mdi:shield-home
        {% else %}
          mdi:shield-off
        {% endif %}
    dashboard_occupancy_state:
      friendly_name: Occupancy State
      value_template: >-
        {% if is_state("group.residents", "home") %}
          Resident
        {% elif is_state("sensor.mode_guest", "on") %}
          Guest
        {% else %}
          Cats
        {% endif %}
      icon_template: >-
        {% if is_state("group.residents", "home") %}
          mdi:account-multiple
        {% elif is_state("sensor.mode_guest", "on") %}
          mdi:human-greeting
        {% else %}
          mdi:cat
        {% endif %}
    dashboard_simulate_presence_status:
      friendly_name: Simulate Presence Status
      value_template: >
        {% if is_state('input_boolean.mode_simulate_presence', 'on') %}
          Simulating presence.
        {% else %}
          off
        {% endif %}
    dashboard_garage_actual_status:
      friendly_name: Garage Actual Status
      value_template: >-
        {{ 'off' if is_state("cover.garage_actual", "closed") else "Garage Actual is open." }}
    dashboard_open_window_status:
      friendly_name: Open Window Status
      value_template: >-
        {% set num_windows = states.binary_sensor
          | selectattr('entity_id', 'in', states.group.all_windows.attributes.entity_id)
          | selectattr('state', 'eq', 'on')
          | list
          | length
        %}
        {% set num_downstairs = states.binary_sensor
          | selectattr('entity_id', 'in', states.group.downstairs_windows.attributes.entity_id)
          | selectattr('state', 'eq', 'on')
          | list
          | length
        %}
        {% set num_upstairs = states.binary_sensor
          | selectattr('entity_id', 'in', states.group.upstairs_windows.attributes.entity_id)
          | selectattr('state', 'eq', 'on')
          | list
          | length
        %}

        {% if num_windows > 1 %}
          {% if num_downstairs == 0 %}
            {{ num_windows}} upstairs windows are open.
          {% elif num_upstairs == 0 %}
            {{ num_windows}} downstairs windows are open.
          {% else %}
            {{ num_windows}} windows are open.
          {% endif %}
        {% elif num_windows == 1 %}
          {% set open_window = states.binary_sensor
            | selectattr('entity_id', 'in', states.group.all_windows.attributes.entity_id)
            | selectattr('state', 'eq', 'on')
            | first
          %}
          {{ open_window.attributes.friendly_name }} are open.
        {% else %}
          off
        {% endif %}
    dashboard_open_door_status:
      friendly_name: Open Door Status
      value_template: >-
        {% set num_doors = states.binary_sensor
          | selectattr('entity_id', 'in', states.group.all_doors.attributes.entity_id)
          | selectattr('state', 'eq', 'on')
          | list
          | length
        %}

        {% if num_doors > 1 %}
          {{ num_doors}} doors are open.
        {% elif num_doors == 1 %}
          {% set open_door = states.binary_sensor
            | selectattr('entity_id', 'in', states.group.all_doors.attributes.entity_id)
            | selectattr('state', 'eq', 'on')
            | first
          %}
          {{ open_door.attributes.friendly_name }} is open.
        {% else %}
          off
        {% endif %}
    dashboard_unlocked_door_status:
      friendly_name: Unlocked Door Status
      value_template: >-
        {% set num = states.lock
          | selectattr('entity_id', 'in', states.group.all_locks.attributes.entity_id)
          | selectattr('state', 'eq', 'unlocked')
          | list
          | length
        %}

        {% if num == 2 %}
          Front Door and Garage Door are unlocked.
        {% elif num ==1 and is_state("lock.august_smart_lock_pro_front_door", "unlocked") %}
          Front Door is unlocked.
        {% elif num ==1 and is_state("lock.august_smart_lock_pro_garage_door", "unlocked") %}
          Garage Door is unlocked.
        {% else %}
          off
        {% endif %}
    dashboard_lights_on_status:
      friendly_name: Lights On Status
      value_template: >-
        {% set num_lights = states.light
          | selectattr('entity_id', 'in', states.group.all_lights.attributes.entity_id)
          | selectattr('state', 'eq', 'on')
          | list
          | length
        %}

        {% if num_lights > 1 %}
          {{ num_lights}} lights are on.
        {% elif num_lights == 1 %}
          {% set lights_on = states.light
            | selectattr('entity_id', 'in', states.group.all_lights.attributes.entity_id)
            | selectattr('state', 'eq', 'on')
            | first
          %}
          {{ lights_on.attributes.friendly_name }} are on.
        {% else %}
          off
        {% endif %}
    dashboard_sonos_song_status:
      friendly_name: Sonos Song Status
      value_template: >-
        {% set group_master = states("sensor.sonos_group_master") %}

        {% if group_master != none %}
          {% if is_state("sensor.sonos_group_master_state", "playing") %}
            {{ state_attr(group_master, "media_artist") }} – {{ state_attr(group_master, "media_title") }}
          {% else %}
            Nothing is playing.
          {% endif %}
        {% else %}
          off
        {% endif %}
    dashboard_sonos_speaker_status:
      friendly_name: Sonos Speaker Status
      value_template: >-
        {% if group_master != none %}
          {{ state_attr(states("sensor.sonos_group_master"), "friendly_name") }} + {{ states("sensor.sonos_speakers_join").split(',') | length }}
        {% else %}
          off
        {% endif %}

    dashboard_bedroom_fan_filter:
      friendly_name: Bedroom Fan Filter
      value_template: >-
        {% if states("sensor.bedroom_hepa_filter_remaining_life") | int(0) <= 33 %}
          on
        {% else %}
          off
        {% endif %}
      icon_template: 'mdi:air-filter'
    dashboard_kitchen_fan_filter:
      friendly_name: Kitchen Fan Filter
      value_template: >-
        {% if states("sensor.kitchen_combi_filter_remaining_life") | int(0) <= 33 %}
          on
        {% else %}
          off
        {% endif %}
      icon_template: 'mdi:air-filter'

#    dashboard_octavia_fuel_remaining:
#      friendly_name: Octavia Fuel Remaining
#      value_template: >-
#        {% if states.device_tracker.octavia.attributes["fuel_level"] <= 33 %}
#          on
#        {% else %}
#          off
#        {% endif %}
#      icon_template: 'mdi:gas-station'
#     dashboard_neato_rory_status:
#       friendly_name: Rory
#       value_template: >-
#         {% if states("vacuum.rory") != 'docked' %}
#           on
#         {% else %}
#           off
#         {% endif %}
#       icon_template: 'mdi:robot-vacuum-variant'
#     dashboard_neato_rory_last_cleaned:
#       friendly_name: Rory - Last Cleaned
#       value_template: >-
#         {% set lastcleaned = as_timestamp(state_attr("vacuum.rory", "clean_stop")) %}
#         {% set fivedaysbefore = (as_timestamp(now()) - (24*60*60*5)) < lastcleaned and as_timestamp(now()) > lastcleaned %}
#         {% set daybefore = (as_timestamp(now()) - (24*60*60))|timestamp_custom('%Y-%m-%d') == lastcleaned|timestamp_custom('%Y-%m-%d') %}
#         {% set dayof = states("sensor.date") == lastcleaned|timestamp_custom('%Y-%m-%d') %}
#         {% if daybefore %}
#           Yesterday
#         {% elif dayof %}
#           Today
#         {% elif fivedaysbefore %}
#           {{ lastcleaned|timestamp_custom('%A') }}
#         {% else %}
#           {{ lastcleaned|timestamp_custom('%B %-d') }}
#         {% endif %}
#     dashboard_neato_amelia_status:
#       friendly_name: Amelia
#       value_template: >-
#         {% if states("vacuum.amelia") != 'docked' %}
#           on
#         {% else %}
#           off
#         {% endif %}
#       icon_template: 'mdi:robot-vacuum-variant'
#     dashboard_neato_amelia_last_cleaned:
#       friendly_name: Amelia - Last Cleaned
#       value_template: >-
#         {% set lastcleaned = as_timestamp(state_attr("vacuum.amelia", "clean_stop")) %}
#         {% set fivedaysbefore = (as_timestamp(now()) - (24*60*60*5)) < lastcleaned and as_timestamp(now()) > lastcleaned %}
#         {% set daybefore = (as_timestamp(now()) - (24*60*60))|timestamp_custom('%Y-%m-%d') == lastcleaned|timestamp_custom('%Y-%m-%d') %}
#         {% set dayof = states("sensor.date") == lastcleaned|timestamp_custom('%Y-%m-%d') %}
#         {% if daybefore %}
#           Yesterday
#         {% elif dayof %}
#           Today
#         {% elif fivedaysbefore %}
#           {{ lastcleaned|timestamp_custom('%A') }}
#         {% else %}
#           {{ lastcleaned|timestamp_custom('%B %-d') }}
#         {% endif %}

# Sonos Grouping Sensors
- platform: template
  sensors:
    sonos_group_master:
      friendly_name: Sonos Group Master
      value_template: >-
        {%- set players = expand('group.sonos_players') -%}
        {%- for player in players if player.state == 'playing' and player.attributes.source is not defined and player.attributes.group_members[0] == player.entity_id %}
          {% if loop.last %}
            {{ player.entity_id }}
          {% endif %}
        {% else %}
          {{ 'media_player.sonos_'+ states('input_select.master_sonos') | lower | replace(" ", "_") }}
        {% endfor -%}

    sonos_group_master_state:
      friendly_name: Sonos Group Master - State
      value_template: >-
        {%- set master = states('sensor.sonos_group_master') -%}
        {{- 'playing' if is_state(master, 'playing') else 'paused' -}}

    sonos_group_master_shuffle:
      friendly_name: Sonos Group Master - Shuffle
      value_template: >-
        {%- set master = states('sensor.sonos_group_master') -%}
        {{- 'on' if is_state_attr(master, 'shuffle', true) else 'off' -}}

    sonos_group_master_repeat:
      friendly_name: Sonos Group Master - Shuffle
      value_template: >-
        {%- set master = states('sensor.sonos_group_master') -%}
        {{- 'on' if is_state_attr(master, 'repeat', 'all') else 'off' -}}

    sonos_speakers_join:
      friendly_name: Sonos Join Speakers
      value_template: >-
        {% set master = states('sensor.sonos_group_master') %}
        {% for switch in states.input_boolean if "sonos" in switch.entity_id and switch.state == "on" and switch.entity_id|replace("input_boolean", "media_player") != master -%}
          {{ switch.entity_id|replace("input_boolean", "media_player") }}
          {%- if not loop.last -%}
            ,
          {%- endif %}
        {%- endfor %}

    sonos_speakers_unjoin:
      friendly_name: Sonos Unjoin Speakers
      value_template: >-
        {% set master = states('sensor.sonos_group_master') %}
        {% for switch in states.input_boolean if "sonos" in switch.entity_id and switch.state == "off" and switch.entity_id|replace("input_boolean", "media_player") != master -%}
          {{ switch.entity_id|replace("input_boolean", "media_player") }}
          {%- if not loop.last -%}
            ,
          {%- endif %}
        {%- endfor %}

    sonos_switches_on:
      friendly_name: Sonos Switches On
      value_template: >-
        {%- set master = 'media_player.sonos_'+ states('input_select.master_sonos') | lower | replace(" ", "_") -%}
        {%- set players = expand('group.sonos_players') -%}
        {%- for player in players if player.entity_id == master %}
          {%- set slaves = player.attributes.group_members %}
          {{ slaves|join(",")|replace("media_player", "input_boolean") }}
        {%- endfor %}

    sonos_switches_off:
      friendly_name: Sonos Switches Off
      value_template: >-
        {%- set master = 'media_player.sonos_'+ states('input_select.master_sonos') | lower | replace(" ", "_") -%}
        {%- set players = expand('group.sonos_players') -%}
        {%- for player in players if player.attributes.group_members | length == 1 and player.entity_id != master -%}
          {{ player.entity_id|replace("media_player", "input_boolean") }}
          {%- if not loop.last -%}
            ,
          {%- endif -%}
        {%- endfor %}


# Sonos Volume Sensors
- platform: template
  sensors:
    sonos_kitchen_volume:
      friendly_name: Sonos Kitchen Volume
      value_template: >-
        {%- if state_attr('media_player.sonos_kitchen', 'volume_level') is defined and state_attr('media_player.sonos_kitchen', 'volume_level') is number -%}
          {{ (state_attr('media_player.sonos_kitchen', 'volume_level') * 100) | int(0) ~ '%' }}
        {%- else -%}
          Unavailable
        {%- endif %}
    sonos_living_room_volume:
      friendly_name: Sonos Living Room Volume
      value_template: >-
        {%- if state_attr('media_player.sonos_living_room', 'volume_level') is defined and state_attr('media_player.sonos_living_room', 'volume_level') is number -%}
          {{ (state_attr('media_player.sonos_living_room', 'volume_level') * 100) | int(0) ~ '%' }}
        {%- else -%}
          Unavailable
        {%- endif %}
    sonos_rec_room_volume:
      friendly_name: Sonos Rec Room Volume
      value_template: >-
        {%- if state_attr('media_player.sonos_rec_room', 'volume_level') is defined and state_attr('media_player.sonos_rec_room', 'volume_level') is number -%}
          {{ (state_attr('media_player.sonos_rec_room', 'volume_level') * 100) | int(0) ~ '%' }}
        {%- else -%}
          Unavailable
        {%- endif %}
    sonos_bedroom_volume:
      friendly_name: Sonos Bedroom Volume
      value_template: >-
        {%- if state_attr('media_player.sonos_bedroom', 'volume_level') is defined and state_attr('media_player.sonos_bedroom', 'volume_level') is number -%}
          {{ (state_attr('media_player.sonos_bedroom', 'volume_level') * 100) | int(0) ~ '%' }}
        {%- else -%}
          Unavailable
        {%- endif %}
    sonos_bathroom_volume:
      friendly_name: Sonos Bathroom Volume
      value_template: >-
        {%- if state_attr('media_player.sonos_bathroom', 'volume_level') is defined and state_attr('media_player.sonos_bathroom', 'volume_level') is number -%}
          {{ (state_attr('media_player.sonos_bathroom', 'volume_level') * 100) | int(0) ~ '%' }}
        {%- else -%}
          Unavailable
        {%- endif %}
    sonos_den_volume:
      friendly_name: Sonos Den Volume
      value_template: >-
        {%- if state_attr('media_player.sonos_den', 'volume_level') is defined and state_attr('media_player.sonos_den', 'volume_level') is number -%}
          {{ (state_attr('media_player.sonos_den', 'volume_level') * 100) | int(0) ~ '%' }}
        {%- else -%}
          Unavailable
        {%- endif %}
    sonos_move_volume:
      friendly_name: Sonos Move Volume
      value_template: >-
        {%- if state_attr('media_player.sonos_move', 'volume_level') is defined and state_attr('media_player.sonos_move', 'volume_level') is number -%}
          {{ (state_attr('media_player.sonos_move', 'volume_level') * 100) | int(0) ~ '%' }}
        {%- else -%}
          Unavailable
        {%- endif %}


# Preferred Lighting Time Sensors
- platform: template
  sensors:
    prefer_lighting_low:
      friendly_name: Prefer Lighting Low Time
      # 9:00pm on weekdays, 10:00pm on weekends
      value_template: >-
        {% set forcerefresh = states("sensor.date") %}
        {{ '21:00' if now().strftime('%A')|lower in ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday'] else '22:00' }}
    prefer_lighting_mid:
      friendly_name: Prefer Lighting Mid Time
      # Half way between Night Mode and Prefer Low
      value_template: >-
        {% set forcerefresh = states("sensor.date") %}
        {%- set today      = as_timestamp(now()) | timestamp_custom('%Y-%m-%d') -%}
        {%- set sunset     = as_timestamp(today ~ " " ~ states('sensor.suncalc_sunsetstart')) -%}
        {%- set prefer_low = states('sensor.prefer_lighting_low') -%}
        {{- (((as_timestamp(today ~ " " ~ prefer_low) - sunset) / 2) + sunset) | timestamp_custom("%H:%M") }}
    prefer_lighting_high:
      friendly_name: Prefer Lighting High Time
      # Same as Day Mode
      value_template: "{{ states('sensor.suncalc_goldenhourend') }}"


# Preferred Lighting Time Sensors - Display
- platform: template
  sensors:
    dashboard_prefer_lighting_low:
      friendly_name: Prefer Lighting Low Time
      value_template: "{{ as_timestamp(states('sensor.date') + ' ' + states('sensor.prefer_lighting_low')) | timestamp_custom('%-I:%M %p') }}"
    dashboard_prefer_lighting_mid:
      friendly_name: Prefer Lighting Mid Time
      value_template: "{{ as_timestamp(states('sensor.date') + ' ' + states('sensor.prefer_lighting_mid')) | timestamp_custom('%-I:%M %p') }}"
    dashboard_prefer_lighting_high:
      friendly_name: Prefer Lighting High Time
      value_template: "{{ as_timestamp(states('sensor.date') + ' ' + states('sensor.prefer_lighting_high')) | timestamp_custom('%-I:%M %p') }}"


# Nest Sleep Mode Temperatures
- platform: template
  sensors:
    climate_downstairs_sleep_mode_cool:
      friendly_name: Downstairs Nest Sleep Mode - Cool
      value_template: 80
      unit_of_measurement: "ºF"
    climate_downstairs_sleep_mode_heat:
      friendly_name: Downstairs Nest Sleep Mode - Heat
      value_template: 76
      unit_of_measurement: "ºF"
    climate_upstairs_sleep_mode_cool:
      friendly_name: Upstairs Nest Sleep Mode - Cool
      value_template: 74
      unit_of_measurement: "ºF"
    climate_upstairs_sleep_mode_heat:
      friendly_name: Upstairs Nest Sleep Mode - Heat
      value_template: 74
      unit_of_measurement: "ºF"


# Resident & Vehicle Sensors
- platform: template
  sensors:
    device_tracker_alex:
      friendly_name: Alex
      value_template: >-
        {%- if is_state('device_tracker.alexs_iphone_geofency', 'not_home') -%}
          {{ state_attr('sensor.alex', 'city') }}
        {%- elif 'extended' in states('device_tracker.alexs_iphone_geofency') -%}
          {{ state_attr('sensor.alex', 'city') }}
        {%- else -%}
          {{ states('device_tracker.alexs_iphone_geofency') | replace("not_home", "away") | title }}
        {%- endif %}
      entity_picture_template: '{{ state_attr("person.alex", "entity_picture") }}'
    device_tracker_alex_recently_home:
      friendly_name: Alex - Recently Home
      value_template: >-
        {% if states('sensor.uptime') | int(0) > 5 %}
          {% if is_state('device_tracker.alexs_iphone_geofency', 'home') and as_timestamp(now()) < (as_timestamp(states.device_tracker.alexs_iphone_geofency.last_changed) + (60 * 5)) %}
            on
          {% else %}
            off
          {% endif %}
        {% else %}
          off
        {% endif %}
    device_tracker_octavia:
      friendly_name: Octavia
      value_template: >-
        {%- if is_state('device_tracker.beacon_octavia', 'not_home') -%}
          {{ state_attr('sensor.octavia', 'city') }}
        {%- elif 'extended' in states('device_tracker.beacon_octavia') -%}
          {{ state_attr('sensor.octavia', 'city') }}
        {%- else -%}
          {{ states('device_tracker.beacon_octavia') | replace("not_home", "away") | title }}
        {%- endif %}
      entity_picture_template: /local/jeep.png
    device_tracker_garage_actual_recently_closed:
      friendly_name: Garage - Recently Closed
      value_template: >-
        {% if states('sensor.uptime') | int(0) > 5 %}
          {% if is_state('binary_sensor.garage_actual', 'off') and as_timestamp(now()) < (as_timestamp(states.binary_sensor.garage_actual.last_changed) + (60 * 5)) %}
            on
          {% else %}
            off
          {% endif %}
        {% else %}
          off
        {% endif %}


# Tautulli Sensors
- platform: template
  sensors:
    tautulli_count_transcode:
      friendly_name: Stream Count (Transcode)
      value_template: '{{ state_attr("sensor.tautulli", "stream_count_transcode") }}'
    tautulli_direct_plays:
      friendly_name: Stream Count (Direct Play)
      value_template: '{{ state_attr("sensor.tautulli", "stream_count_direct_play") }}'
    tautulli_direct_streams:
      friendly_name: Stream Count (Direct Stream)
      value_template: '{{ state_attr("sensor.tautulli", "stream_count_direct_stream") }}'
    tautulli_total_streams:
      friendly_name: Stream Count
      value_template: '{{ state_attr("sensor.tautulli", "stream_count") }}'
    tautulli_wan_bandwidth:
      friendly_name: WAN Bandwidth
      value_template: '{{ ((state_attr("sensor.tautulli", "wan_bandwidth") / 1000) | round(1) | string).rstrip("0").rstrip(".") }}'
      unit_of_measurement: "Mbps"
    tautulli_lan_bandwidth:
      friendly_name: LAN Bandwidth
      value_template: '{{ ((state_attr("sensor.tautulli", "lan_bandwidth") / 1000) | round(1) | string).rstrip("0").rstrip(".") }}'
      unit_of_measurement: "Mbps"
    # Tautulli User 1
    tautulli_user1:
      friendly_name: !secret tautulli_user1_friendly_name
      value_template: '{{ "off" if state_attr("sensor.tautulli", states("input_text.tautulli_user1")).Activity == none else state_attr("sensor.tautulli", states("input_text.tautulli_user1")).Activity | title }}'
      entity_picture_template: '{{ state_attr("sensor.tautulli", states("input_text.tautulli_user1")).user_thumb | default("/local/none.png") }}'
    # Tautulli User 2
    tautulli_user2:
      friendly_name: !secret tautulli_user2_friendly_name
      value_template: '{{ "off" if state_attr("sensor.tautulli", states("input_text.tautulli_user2")).Activity == none else state_attr("sensor.tautulli", states("input_text.tautulli_user2")).Activity | title }}'
      entity_picture_template: '{{ state_attr("sensor.tautulli", states("input_text.tautulli_user2")).user_thumb | default("/local/none.png") }}'
    # Tautulli User 3
    tautulli_user3:
      friendly_name: !secret tautulli_user3_friendly_name
      value_template: '{{ "off" if state_attr("sensor.tautulli", states("input_text.tautulli_user3")).Activity == none else state_attr("sensor.tautulli", states("input_text.tautulli_user3")).Activity | title }}'
      entity_picture_template: '{{ state_attr("sensor.tautulli", states("input_text.tautulli_user3")).user_thumb | default("/local/none.png") }}'
    # Tautulli User 4
    tautulli_user4:
      friendly_name: !secret tautulli_user4_friendly_name
      value_template: '{{ "off" if state_attr("sensor.tautulli", states("input_text.tautulli_user4")).Activity == none else state_attr("sensor.tautulli", states("input_text.tautulli_user4")).Activity | title }}'
      entity_picture_template: '{{ state_attr("sensor.tautulli", states("input_text.tautulli_user4")).user_thumb | default("/local/none.png") }}'
    # Tautulli User 5
    tautulli_user5:
      friendly_name: !secret tautulli_user5_friendly_name
      value_template: '{{ "off" if state_attr("sensor.tautulli", states("input_text.tautulli_user5")).Activity == none else state_attr("sensor.tautulli", states("input_text.tautulli_user5")).Activity | title }}'
      entity_picture_template: '{{ state_attr("sensor.tautulli", states("input_text.tautulli_user5")).user_thumb | default("/local/none.png") }}'
    # Tautulli User 6
    tautulli_user6:
      friendly_name: !secret tautulli_user6_friendly_name
      value_template: '{{ "off" if state_attr("sensor.tautulli", states("input_text.tautulli_user6")).Activity == none else state_attr("sensor.tautulli", states("input_text.tautulli_user6")).Activity | title }}'
      entity_picture_template: '{{ state_attr("sensor.tautulli", states("input_text.tautulli_user6")).user_thumb | default("/local/none.png") }}'
    # Tautulli User 7
    tautulli_user7:
      friendly_name: !secret tautulli_user7_friendly_name
      value_template: '{{ "off" if state_attr("sensor.tautulli", states("input_text.tautulli_user7")).Activity == none else state_attr("sensor.tautulli", states("input_text.tautulli_user7")).Activity | title }}'
      entity_picture_template: '{{ state_attr("sensor.tautulli", states("input_text.tautulli_user7")).user_thumb | default("/local/none.png") }}'
    # Tautulli User 8
    tautulli_user8:
      friendly_name: !secret tautulli_user8_friendly_name
      value_template: '{{ "off" if state_attr("sensor.tautulli", states("input_text.tautulli_user8")).Activity == none else state_attr("sensor.tautulli", states("input_text.tautulli_user8")).Activity | title }}'
      entity_picture_template: '{{ state_attr("sensor.tautulli", states("input_text.tautulli_user8")).user_thumb | default("/local/none.png") }}'
    # Tautulli User 9
    tautulli_user9:
      friendly_name: !secret tautulli_user9_friendly_name
      value_template: '{{ "off" if state_attr("sensor.tautulli", states("input_text.tautulli_user9")).Activity == none else state_attr("sensor.tautulli", states("input_text.tautulli_user9")).Activity | title }}'
      entity_picture_template: '{{ state_attr("sensor.tautulli", states("input_text.tautulli_user9")).user_thumb | default("/local/none.png") }}'

- platform: rest
  name: Tautulli Plex Update Available
  resource: !secret tautulli_plex_update
  json_attributes_path: "$.response.data"
  json_attributes:
    - version
  value_template: '{{ "on" if value_json.response.data.update_available else "off" }}'
  scan_interval: 3600


# InfluxDB Sensors
- platform: influxdb
  host: !secret influxdb_host
  port: !secret influxdb_port
  queries:
    # Overwatch Server
    - name: Overwatch CPU Load 1
      unit_of_measurement: '1 min'
      group_function: last
      where: '"host" = ''overwatch'' and time > now() - 5m'
      value_template: '{{ value | round(2) }}'
      measurement: '"system"'
      field: '"load1"'
      database: telegraf
    - name: Overwatch CPU Load 5
      unit_of_measurement: '5 min'
      group_function: last
      where: '"host" = ''overwatch'' and time > now() - 5m'
      value_template: '{{ value | round(2) }}'
      measurement: '"system"'
      field: '"load5"'
      database: telegraf
    - name: Overwatch CPU Load 15
      unit_of_measurement: '15 min'
      group_function: last
      where: '"host" = ''overwatch'' and time > now() - 5m'
      value_template: '{{ value | round(2) }}'
      measurement: '"system"'
      field: '"load15"'
      database: telegraf
    - name: Overwatch CPU Temp
      unit_of_measurement: 'ºC'
      group_function: last
      where: '"host" = ''overwatch'' and "chip" = ''coretemp-isa-0000'' and time > now() - 5m'
      value_template: '{{ value | round() }}'
      measurement: '"sensors"'
      field: '"temp_input"'
      database: telegraf
    - name: Overwatch RAM Used
      unit_of_measurement: '%'
      group_function: last
      where: '"host" = ''overwatch'' and time > now() - 5m'
      value_template: '{{ value | round() }}'
      measurement: '"mem"'
      field: '"used_percent"'
      database: telegraf
    # Woodhouse Server
    - name: Woodhouse CPU Load 1
      unit_of_measurement: '1 min'
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ value | round(2) }}'
      measurement: '"system"'
      field: '"load1"'
      database: telegraf
    - name: Woodhouse CPU Load 5
      unit_of_measurement: '5 min'
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ value | round(2) }}'
      measurement: '"system"'
      field: '"load5"'
      database: telegraf
    - name: Woodhouse CPU Load 15
      unit_of_measurement: '15 min'
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ value | round(2) }}'
      measurement: '"system"'
      field: '"load15"'
      database: telegraf
    - name: Woodhouse CPU1 Temp
      unit_of_measurement: 'ºC'
      group_function: last
      where: '"host" = ''woodhouse'' and "chip" = ''coretemp-isa-0000'' and time > now() - 5m'
      value_template: '{{ value | round() }}'
      measurement: '"sensors"'
      field: '"temp_input"'
      database: telegraf
    - name: Woodhouse CPU2 Temp
      unit_of_measurement: 'ºC'
      group_function: last
      where: '"host" = ''woodhouse'' and "chip" = ''coretemp-isa-0001'' and time > now() - 5m'
      value_template: '{{ value | round() }}'
      measurement: '"sensors"'
      field: '"temp_input"'
      database: telegraf
    - name: Woodhouse RAM Used
      unit_of_measurement: '%'
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ value | round() }}'
      measurement: '"mem"'
      field: '"used_percent"'
      database: telegraf
    # Overwatch Services
    - name: Service Status Home Assistant
      group_function: last
      where: !secret influxdb_service_status_home_assistant
      value_template: '{{ "Up" if value == "200" else "Down" }}'
      measurement: '"http_response"'
      field: '"http_response_code"'
      database: telegraf
    - name: Service Status Dashboard
      group_function: last
      where: !secret influxdb_service_status_dashboard
      value_template: '{{ "Up" if value == "200" else "Down" }}'
      measurement: '"http_response"'
      field: '"http_response_code"'
      database: telegraf
    # Woodhouse Services
    - name: Service Status Plex
      group_function: last
      where: !secret influxdb_service_status_plex
      value_template: '{{ "Up" if value == "200" else "Down" }}'
      measurement: '"http_response"'
      field: '"http_response_code"'
      database: telegraf
    - name: Service Status Sonarr
      group_function: last
      where: !secret influxdb_service_status_sonarr
      value_template: '{{ "Up" if value == "200" else "Down" }}'
      measurement: '"http_response"'
      field: '"http_response_code"'
      database: telegraf
    - name: Service Status SABnzbd
      group_function: last
      where: !secret influxdb_service_status_sabnzbd
      value_template: '{{ "Up" if value == "200" else "Down" }}'
      measurement: '"http_response"'
      field: '"http_response_code"'
      database: telegraf
    - name: Service Status Tautulli
      group_function: last
      where: !secret influxdb_service_status_tautulli
      value_template: '{{ "Up" if value == "200" else "Down" }}'
      measurement: '"http_response"'
      field: '"http_response_code"'
      database: telegraf
    - name: Service Status Grafana
      group_function: last
      where: !secret influxdb_service_status_grafana
      value_template: '{{ "Up" if value == "200" else "Down" }}'
      measurement: '"http_response"'
      field: '"http_response_code"'
      database: telegraf
    #UniFi
    - name: Service Status UniFi Network
      group_function: last
      where: !secret influxdb_service_status_unifi_network
      value_template: '{{ "Up" if value == "200" else "Down" }}'
      measurement: '"http_response"'
      field: '"http_response_code"'
      database: telegraf
    - name: Service Status UniFi Protect
      group_function: last
      where: !secret influxdb_service_status_unifi_protect
      value_template: '{{ "Up" if value == "200" else "Down" }}'
      measurement: '"http_response"'
      field: '"http_response_code"'
      database: telegraf
    #Network
    - name: Network Status Cox WAN
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ "Up" if value == "1" else "Down" }}'
      measurement: '"wan"'
      field: '"cox_wan"'
      database: telegraf
    - name: Network Status VPN WAN
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ "Up" if value == "1" else "Down" }}'
      measurement: '"wan"'
      field: '"vpn_wan"'
      database: telegraf
    - name: Network Status VPN2 WAN
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ "Up" if value == "1" else "Down" }}'
      measurement: '"wan"'
      field: '"vpn2_wan"'
      database: telegraf
    - name: Network Status VPN3 WAN
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ "Up" if value == "1" else "Down" }}'
      measurement: '"wan"'
      field: '"vpn3_wan"'
      database: telegraf
    - name: Network Status LAN
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ "Up" if value == "1" else "Down" }}'
      measurement: '"wan"'
      field: '"lan"'
      database: telegraf
    - name: Network Status VL40 IoT
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ "Up" if value == "1" else "Down" }}'
      measurement: '"wan"'
      field: '"vl40_iot"'
      database: telegraf
    - name: Network Status  VL50 Guest
      group_function: last
      where: '"host" = ''woodhouse'' and time > now() - 5m'
      value_template: '{{ "Up" if value == "1" else "Down" }}'
      measurement: '"wan"'
      field: '"vl50_guest"'
      database: telegraf


# States for Conditionals
- platform: template
  sensors:
    state_all_services_up:
      friendly_name: State - All Services Up
      value_template: >-
        {% set services = [
          "sensor.service_status_home_assistant",
          "sensor.service_status_dashboard",
          "sensor.service_status_plex",
          "sensor.service_status_sonarr",
          "sensor.service_status_sabnzbd",
          "sensor.service_status_tautulli",
          "sensor.service_status_grafana",
          "sensor.service_status_unifi_network",
          "sensor.service_status_unifi_protect"
        ] %}

        {{ 'on' if states.sensor
          | selectattr('entity_id', 'in', services)
          | selectattr('state', 'eq', 'Down')
          | list
          | count == 0
          else 'off'
        }}
    state_all_vpn_wan_down:
      friendly_name: State - All VPN WANs Down
      value_template: >-
        {% set networks = [
          "sensor.network_status_vpn_wan",
          "sensor.network_status_vpn2_wan",
          "sensor.network_status_vpn3_wan",
        ] %}

        {{ 'on' if states.sensor
          | selectattr('entity_id', 'in', networks)
          | selectattr('state', 'eq', 'Down')
          | list
          | count == 3
          else 'off'
        }}
    state_ha_new_major_version:
      friendly_name: State - HA New Major Version
      value_template: >-
        {%- if states.sensor.current_version.state is defined and states.sensor.latest_version.state is defined -%}
          {{- "on" if states("sensor.latest_version").rsplit(".", 1)[0] > states("sensor.current_version").rsplit(".", 1)[0] else "off" -}}
        {%- else -%}
          unknown
        {%- endif %}


# Cox Data Usage
# - platform: file
#   name: Cox Data Plan
#   file_path: /config/json/cox_usage.json
#   value_template: >
#     {% if value_json is defined %}
#       {% if value_json.visitorLoginStatus == 'loggedin' %}
#         {{ value_json.lpInternetSubscribed }}
#       {% else %}
#         Update Error
#       {% endif %}
#     {% else %}
#       undefined
#     {% endif %}

# - platform: file
#   name: Cox Data Usage
#   file_path: /config/json/cox_usage.json
#   value_template: >
#     {% if value_json is defined %}
#       {% if value_json.visitorLoginStatus == 'loggedin' %}
#         {% if value_json.dumUsage | int(0) == 0 and value_json.dumLimit | int(0) == 0 and value_json.dumUtilization | int(0) == 0 %}
#           {{ sensor.cox_data_usage }}
#         {% else %}
#           {{ value_json.dumUtilization | int(0) }}
#         {% endif %}
#       {% else %}
#         unknown
#       {% endif %}
#     {% else %}
#       undefined
#     {% endif %}
#   unit_of_measurement: '%'

# - platform: file
#   name: Cox Data Usage - Long
#   file_path: /config/json/cox_usage.json
#   value_template: >
#     {% if value_json is defined %}
#       {% if value_json.dumUsage | int(0) == 0 and value_json.dumLimit | int(0) == 0 and value_json.dumUtilization | int(0) == 0 %}
#        stats unavailable
#      {% else %}
#         {{ value_json.dumUsage | int(0) }} / {{ value_json.dumLimit | int(0) }} GB ({{ value_json.dumUtilization | int(0) }} %)
#       {% endif %}
#     {% else %}
#       undefined
#     {% endif %}

# - platform: file
#   name: Cox Data Resets
#   file_path: /config/json/cox_usage.json
#   value_template: >
#     {% if value_json is defined %}
#       {% if value_json.visitorLoginStatus == 'loggedin' %}
#         {% if value_json.dumDaysLeft is defined %}
#           {{ value_json.dumDaysLeft | int(0) }}
#         {% else %}
#           {{ sensor.cox_data_resets }}
#       {% endif %}
#       {% else %}
#         unknown
#       {% endif %}
#     {% else %}
#       undefined
#     {% endif %}
#   unit_of_measurement: 'days'


# suncalc data sensors
#   sunrise       - sunrise (top edge of the sun appears on the horizon)
#   sunriseEnd    - sunrise ends (bottom edge of the sun touches the horizon)
#   goldenHourEnd - morning golden hour (soft light, best time for photography) ends
#   solarNoon     - solar noon (sun is in the highest position)
#   goldenHour    - evening golden hour starts
#   sunsetStart   - sunset starts (bottom edge of the sun touches the horizon)
#   sunset        - sunset (sun disappears below the horizon, evening civil twilight starts)
#   dusk          - dusk (evening nautical twilight starts)
#   nauticalDusk  - nautical dusk (evening astronomical twilight starts)
#   night         - night starts (dark enough for astronomical observations)
#   nadir         - nadir (darkest moment of the night, sun is in the lowest position)
#   nightEnd      - night ends (morning astronomical twilight starts)
#   nauticalDawn  - nautical dawn (morning nautical twilight starts)
#   dawn          - dawn (morning nautical twilight ends, morning civil twilight starts)
#   HH:MM         - timestamp_custom('%H:%M')

# Used for "sun starts to rise" automations in the morning
- platform: file
  name: Suncalc sunriseEnd
  file_path: /config/json/suncalc_data.json
  value_template: >
    {% if value_json is defined %}
      {{ as_timestamp(value_json.sunriseEnd) | timestamp_custom('%H:%M') }}
    {% else %}
      undefined
    {% endif %}

# Used for "first light" automations in the morning
- platform: file
  name: Suncalc goldenHourEnd
  file_path: /config/json/suncalc_data.json
  value_template: >
    {% if value_json is defined %}
      {{ as_timestamp(value_json.goldenHourEnd) | timestamp_custom('%H:%M') }}
    {% else %}
      undefined
    {% endif %}

# Used for "sun starts setting" automations in the evening
- platform: file
  name: Suncalc goldenHour
  file_path: /config/json/suncalc_data.json
  value_template: >
    {% if value_json is defined %}
      {{ as_timestamp(value_json.goldenHour) | timestamp_custom('%H:%M') }}
    {% else %}
      undefined
    {% endif %}

# Used for "sun light is gone" automations in the evening
- platform: file
  name: Suncalc sunsetStart
  file_path: /config/json/suncalc_data.json
  value_template: >
    {% if value_json is defined %}
      {{ as_timestamp(value_json.sunsetStart) | timestamp_custom('%H:%M') }}
    {% else %}
      undefined
    {% endif %}

# Used for "night ends" automations in the morning
- platform: file
  name: Suncalc nightEnd
  file_path: /config/json/suncalc_data.json
  value_template: >
    {% if value_json is defined %}
      {{ as_timestamp(value_json.nightEnd) | timestamp_custom('%H:%M') }}
    {% else %}
      undefined
    {% endif %}

# Used for on screen display
- platform: file
  name: Golden Hour
  file_path: /config/json/suncalc_data.json
  value_template: >
    {% if value_json is defined %}
      {{ as_timestamp(value_json.goldenHour) | timestamp_custom('%-I:%M %p') }}
    {% else %}
      undefined
    {% endif %}

- platform: file
  name: First Light
  file_path: /config/json/suncalc_data.json
  value_template: >
    {% if value_json is defined %}
      {{ as_timestamp(value_json.sunriseEnd) | timestamp_custom('%-I:%M %p') }}
    {% else %}
      undefined
    {% endif %}

- platform: file
  name: First Light - Show
  file_path: /config/json/suncalc_data.json
  value_template: >
    {% if value_json is defined %}
      {% if as_timestamp(now()) | timestamp_custom("%H:%M") <= as_timestamp(value_json.sunriseEnd) | timestamp_custom("%H:%M") or as_timestamp(now()) | timestamp_custom("%H:%M") > as_timestamp(value_json.goldenHour) | timestamp_custom("%H:%M") %}
        on
      {% else %}
        off
      {% endif %}
    {% else %}
      off
    {% endif %}

- platform: rest
  name: Bedroom Hallway Dashboard
  resource: !secret bedroom_hallway_dashboard_device_info
  json_attributes:
  - isPlugged
  - batteryLevel
  - screenBrightness
  - screenOn
  value_template: '{{ "Screen On" if value_json.screenOn else "Screen Off" }}'

- platform: rest
  name: Downstairs Hallway Dashboard
  resource: !secret downstairs_hallway_dashboard_device_info
  json_attributes:
  - isPlugged
  - batteryLevel
  - screenBrightness
  - screenOn
  value_template: '{{ "Screen On" if value_json.screenOn else "Screen Off" }}'

- platform: rest
  name: Garage Entrance Dashboard
  resource: !secret garage_entrance_dashboard_device_info
  json_attributes:
  - isPlugged
  - batteryLevel
  - screenBrightness
  - screenOn
  value_template: '{{ "Screen On" if value_json.screenOn else "Screen Off" }}'
